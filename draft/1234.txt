| Задача                     | Django ORM                                                                     | SQLAlchemy ORM (sync)                                                                                                                                                                    | SQLAlchemy ORM (async)                                                                                                                                                                                                               |
| -------------------------- | ------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **Все записи**             | `User.objects.all()`                                                           | `session.query(User).all()`                                                                                                                                                              | `(await session.scalars(select(User))).all()`                                                                                                                                                                                        |
| **Фильтрация**             | `User.objects.filter(is_active=True)`                                          | `session.query(User).filter(User.is_active == True).all()`                                                                                                                               | `(await session.scalars(select(User).where(User.is_active == True))).all()`                                                                                                                                                          |
| **Один объект по pk**      | `User.objects.get(id=1)`                                                       | `session.get(User, 1)`                                                                                                                                                                   | `await session.get(User, 1)`                                                                                                                                                                                                         |
| **Один объект по фильтру** | `User.objects.get(username="admin")`                                           | `session.query(User).filter(User.username=="admin").first()`                                                                                                                             | `await session.scalar(select(User).where(User.username=="admin"))`                                                                                                                                                                   |
| **Подсчёт**                | `User.objects.count()`                                                         | `session.query(func.count()).select_from(User).scalar()`                                                                                                                                 | `await session.scalar(select(func.count()).select_from(User))`                                                                                                                                                                       |
| **Выборка полей**          | `User.objects.values("id", "username")`                                        | `session.query(User.id, User.username).all()`                                                                                                                                            | `(await session.execute(select(User.id, User.username))).all()`                                                                                                                                                                      |
| **Лимит**                  | `User.objects.all()[:10]`                                                      | `session.query(User).limit(10).all()`                                                                                                                                                    | `(await session.scalars(select(User).limit(10))).all()`                                                                                                                                                                              |
| **Сортировка**             | `User.objects.order_by("-date_joined")`                                        | `session.query(User).order_by(User.date_joined.desc()).all()`                                                                                                                            | `(await session.scalars(select(User).order_by(User.date_joined.desc()))).all()`                                                                                                                                                      |
| **Первый из фильтра**      | `User.objects.filter(is_active=True).first()`                                  | `session.query(User).filter(User.is_active == True).first()`                                                                                                                             | `await session.scalar(select(User).where(User.is_active == True).limit(1))`                                                                                                                                                          |
| **Последний из фильтра**   | `User.objects.filter(is_active=True).last()`                                   | `session.query(User).filter(User.is_active == True).order_by(User.id.desc()).first()`                                                                                                    | `await session.scalar(select(User).where(User.is_active == True).order_by(User.id.desc()).limit(1))`                                                                                                                                 |
| **Создать объект**         | `User.objects.create(username="alice", password="123")`                        | `user = User(username="alice", password="123"); session.add(user); session.commit()`                                                                                                     | `user = User(username="alice", password="123"); session.add(user); await session.commit(); await session.refresh(user)`                                                                                                              |
| **Обновить объект**        | `User.objects.filter(id=1).update(username="bob")`                             | `user = session.query(User).get(1); user.username="bob"; session.commit()`                                                                                                               | `user = await session.get(User, 1); user.username="bob"; await session.commit()`                                                                                                                                                     |
| **get\_or\_create**        | `User.objects.get_or_create(username="alice", defaults={"password":"123"})`    | `user = session.query(User).filter_by(username="alice").first(); if not user: user = User(username="alice", password="123"); session.add(user); session.commit()`                        | `user = await session.scalar(select(User).where(User.username=="alice")); if not user: user = User(username="alice", password="123"); session.add(user); await session.commit(); await session.refresh(user)`                        |
| **update\_or\_create**     | `User.objects.update_or_create(username="alice", defaults={"password":"123"})` | `user = session.query(User).filter_by(username="alice").first(); if user: user.password="123"; else: user = User(username="alice", password="123"); session.add(user); session.commit()` | `user = await session.scalar(select(User).where(User.username=="alice")); if user: user.password="123"; else: user = User(username="alice", password="123"); session.add(user); await session.commit(); await session.refresh(user)` |



| Django ORM                                   | SQLAlchemy Async ORM                                                                                | Комментарий                            |
| -------------------------------------------- | --------------------------------------------------------------------------------------------------- | -------------------------------------- |
| `User.objects.get(id=1)`                     | `user = await session.scalar(select(User).where(User.id == 1))`                                     | Вернёт один объект `User` или `None`   |
| `User.objects.filter(id=1).first()`          | `user = (await session.scalars(select(User).where(User.id == 1))).first()`                          | Первый результат или `None`            |
| `User.objects.filter(id=1).last()`           | `user = (await session.scalars(select(User).order_by(User.id.desc()).where(User.id == 1))).first()` | Последний результат (нужно `order_by`) |
| `User.objects.first()`                       | `user = (await session.scalars(select(User).order_by(User.id))).first()`                            | Первый объект по сортировке            |
| `User.objects.last()`                        | `user = (await session.scalars(select(User).order_by(User.id.desc()))).first()`                     | Последний объект по сортировке         |
| `User.objects.filter(username="test").get()` | `user = await session.scalar(select(User).where(User.username == "test"))`                          | Аналог `.get()` с фильтром             |
| `User.objects.get_or_create(username="x")`   | ⚡ Нет прямого аналога → нужно: 1) найти через `scalar()`, 2) если `None`, создать и `commit()`      | Вручную реализуется в сервисе          |
| `User.objects.update_or_create(...)`         | ⚡ Нет прямого аналога → нужно: 1) найти, 2) если есть → обновить, иначе создать → `commit()`        | Вручную реализуется в сервисе          |
